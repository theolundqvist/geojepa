// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processed_tile_group.proto

#include "processed_tile_group.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Feature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tags_{},
        min_box_{},
        area_{0},
        width_{0},
        height_{0},
        rotation_{0},
        is_point_{false},
        is_polyline_{false},
        is_polygon_{false},
        is_relation_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Feature::Feature(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;

inline constexpr Tile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodes_{},
        local_coords_{},
        inter_edges_{},
        _inter_edges_cached_byte_size_{0},
        intra_edges_{},
        _intra_edges_cached_byte_size_{0},
        node_to_feature_{},
        _node_to_feature_cached_byte_size_{0},
        features_{},
        zoom_{0},
        x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Tile::Tile(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileDefaultTypeInternal _Tile_default_instance_;

inline constexpr TileGroup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tiles_{},
        zoom_{0},
        x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TileGroup::TileGroup(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TileGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileGroupDefaultTypeInternal() {}
  union {
    TileGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileGroupDefaultTypeInternal _TileGroup_default_instance_;
static ::_pb::Metadata file_level_metadata_processed_5ftile_5fgroup_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_processed_5ftile_5fgroup_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_processed_5ftile_5fgroup_2eproto = nullptr;
const ::uint32_t TableStruct_processed_5ftile_5fgroup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Feature, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.tags_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.min_box_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.area_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.is_point_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.is_polyline_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.is_polygon_),
    PROTOBUF_FIELD_OFFSET(::Feature, _impl_.is_relation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Tile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.nodes_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.local_coords_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.inter_edges_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.intra_edges_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.node_to_feature_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.features_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.zoom_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::Tile, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TileGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TileGroup, _impl_.zoom_),
    PROTOBUF_FIELD_OFFSET(::TileGroup, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::TileGroup, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::TileGroup, _impl_.tiles_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Feature)},
        {18, -1, -1, sizeof(::Tile)},
        {35, -1, -1, sizeof(::TileGroup)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Feature_default_instance_._instance,
    &::_Tile_default_instance_._instance,
    &::_TileGroup_default_instance_._instance,
};
const char descriptor_table_protodef_processed_5ftile_5fgroup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032processed_tile_group.proto\"\267\001\n\007Feature"
    "\022\014\n\004tags\030\001 \003(\t\022\017\n\007min_box\030\002 \003(\002\022\014\n\004area\030"
    "\003 \001(\002\022\r\n\005width\030\004 \001(\002\022\016\n\006height\030\005 \001(\002\022\020\n\010"
    "rotation\030\006 \001(\002\022\020\n\010is_point\030\007 \001(\010\022\023\n\013is_p"
    "olyline\030\010 \001(\010\022\022\n\nis_polygon\030\t \001(\010\022\023\n\013is_"
    "relation\030\n \001(\010\"\256\001\n\004Tile\022\r\n\005nodes\030\001 \003(\002\022\024"
    "\n\014local_coords\030\002 \003(\002\022\023\n\013inter_edges\030\003 \003("
    "\005\022\023\n\013intra_edges\030\004 \003(\005\022\027\n\017node_to_featur"
    "e\030\005 \003(\005\022\032\n\010features\030\006 \003(\0132\010.Feature\022\014\n\004z"
    "oom\030\007 \001(\005\022\t\n\001x\030\010 \001(\005\022\t\n\001y\030\t \001(\005\"E\n\tTileG"
    "roup\022\014\n\004zoom\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005"
    "\022\024\n\005tiles\030\004 \003(\0132\005.Tileb\006proto3"
};
static ::absl::once_flag descriptor_table_processed_5ftile_5fgroup_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_processed_5ftile_5fgroup_2eproto = {
    false,
    false,
    470,
    descriptor_table_protodef_processed_5ftile_5fgroup_2eproto,
    "processed_tile_group.proto",
    &descriptor_table_processed_5ftile_5fgroup_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_processed_5ftile_5fgroup_2eproto::offsets,
    file_level_metadata_processed_5ftile_5fgroup_2eproto,
    file_level_enum_descriptors_processed_5ftile_5fgroup_2eproto,
    file_level_service_descriptors_processed_5ftile_5fgroup_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_processed_5ftile_5fgroup_2eproto_getter() {
  return &descriptor_table_processed_5ftile_5fgroup_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_processed_5ftile_5fgroup_2eproto(&descriptor_table_processed_5ftile_5fgroup_2eproto);
// ===================================================================

class Feature::_Internal {
 public:
};

Feature::Feature(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Feature)
}
inline PROTOBUF_NDEBUG_INLINE Feature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : tags_{visibility, arena, from.tags_},
        min_box_{visibility, arena, from.min_box_},
        _cached_size_{0} {}

Feature::Feature(
    ::google::protobuf::Arena* arena,
    const Feature& from)
    : ::google::protobuf::Message(arena) {
  Feature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, area_),
           offsetof(Impl_, is_relation_) -
               offsetof(Impl_, area_) +
               sizeof(Impl_::is_relation_));

  // @@protoc_insertion_point(copy_constructor:Feature)
}
inline PROTOBUF_NDEBUG_INLINE Feature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tags_{visibility, arena},
        min_box_{visibility, arena},
        _cached_size_{0} {}

inline void Feature::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_),
           0,
           offsetof(Impl_, is_relation_) -
               offsetof(Impl_, area_) +
               sizeof(Impl_::is_relation_));
}
Feature::~Feature() {
  // @@protoc_insertion_point(destructor:Feature)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Feature::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:Feature)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.min_box_.Clear();
  ::memset(&_impl_.area_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_relation_) -
      reinterpret_cast<char*>(&_impl_.area_)) + sizeof(_impl_.is_relation_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Feature::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 28, 2> Feature::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Feature_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string tags = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.tags_)}},
    // repeated float min_box = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.min_box_)}},
    // float area = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.area_)}},
    // float width = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.width_)}},
    // float height = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.height_)}},
    // float rotation = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.rotation_)}},
    // bool is_point = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Feature, _impl_.is_point_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_point_)}},
    // bool is_polyline = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Feature, _impl_.is_polyline_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_polyline_)}},
    // bool is_polygon = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Feature, _impl_.is_polygon_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_polygon_)}},
    // bool is_relation = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Feature, _impl_.is_relation_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_relation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string tags = 1;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.tags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated float min_box = 2;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.min_box_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float area = 3;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.area_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float width = 4;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float height = 5;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float rotation = 6;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.rotation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool is_point = 7;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_point_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_polyline = 8;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_polyline_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_polygon = 9;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_polygon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_relation = 10;
    {PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_relation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\7\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "Feature"
    "tags"
  }},
};

::uint8_t* Feature::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Feature)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; ++i) {
    const auto& s = this->_internal_tags().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Feature.tags");
    target = stream->WriteString(1, s, target);
  }

  // repeated float min_box = 2;
  if (this->_internal_min_box_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_min_box(), target);
  }

  // float area = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_area = this->_internal_area();
  ::uint32_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_area(), target);
  }

  // float width = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_width(), target);
  }

  // float height = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_height(), target);
  }

  // float rotation = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotation = this->_internal_rotation();
  ::uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_rotation(), target);
  }

  // bool is_point = 7;
  if (this->_internal_is_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_point(), target);
  }

  // bool is_polyline = 8;
  if (this->_internal_is_polyline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_is_polyline(), target);
  }

  // bool is_polygon = 9;
  if (this->_internal_is_polygon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_is_polygon(), target);
  }

  // bool is_relation = 10;
  if (this->_internal_is_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_is_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Feature)
  return target;
}

::size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Feature)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_tags().size());
  for (int i = 0, n = _internal_tags().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_tags().Get(i));
  }
  // repeated float min_box = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_min_box_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float area = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_area = this->_internal_area();
  ::uint32_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 5;
  }

  // float width = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  // float height = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  // float rotation = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotation = this->_internal_rotation();
  ::uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    total_size += 5;
  }

  // bool is_point = 7;
  if (this->_internal_is_point() != 0) {
    total_size += 2;
  }

  // bool is_polyline = 8;
  if (this->_internal_is_polyline() != 0) {
    total_size += 2;
  }

  // bool is_polygon = 9;
  if (this->_internal_is_polygon() != 0) {
    total_size += 2;
  }

  // bool is_relation = 10;
  if (this->_internal_is_relation() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Feature::_class_data_ = {
    Feature::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Feature::GetClassData() const {
  return &_class_data_;
}

void Feature::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Feature*>(&to_msg);
  auto& from = static_cast<const Feature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Feature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  _this->_internal_mutable_min_box()->MergeFrom(from._internal_min_box());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_area = from._internal_area();
  ::uint32_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotation = from._internal_rotation();
  ::uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  if (from._internal_is_point() != 0) {
    _this->_internal_set_is_point(from._internal_is_point());
  }
  if (from._internal_is_polyline() != 0) {
    _this->_internal_set_is_polyline(from._internal_is_polyline());
  }
  if (from._internal_is_polygon() != 0) {
    _this->_internal_set_is_polygon(from._internal_is_polygon());
  }
  if (from._internal_is_relation() != 0) {
    _this->_internal_set_is_relation(from._internal_is_relation());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Feature::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Feature::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Feature::InternalSwap(Feature* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.min_box_.InternalSwap(&other->_impl_.min_box_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_relation_)
      + sizeof(Feature::_impl_.is_relation_)
      - PROTOBUF_FIELD_OFFSET(Feature, _impl_.area_)>(
          reinterpret_cast<char*>(&_impl_.area_),
          reinterpret_cast<char*>(&other->_impl_.area_));
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_processed_5ftile_5fgroup_2eproto_getter, &descriptor_table_processed_5ftile_5fgroup_2eproto_once,
      file_level_metadata_processed_5ftile_5fgroup_2eproto[0]);
}
// ===================================================================

class Tile::_Internal {
 public:
};

Tile::Tile(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Tile)
}
inline PROTOBUF_NDEBUG_INLINE Tile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodes_{visibility, arena, from.nodes_},
        local_coords_{visibility, arena, from.local_coords_},
        inter_edges_{visibility, arena, from.inter_edges_},
        _inter_edges_cached_byte_size_{0},
        intra_edges_{visibility, arena, from.intra_edges_},
        _intra_edges_cached_byte_size_{0},
        node_to_feature_{visibility, arena, from.node_to_feature_},
        _node_to_feature_cached_byte_size_{0},
        features_{visibility, arena, from.features_},
        _cached_size_{0} {}

Tile::Tile(
    ::google::protobuf::Arena* arena,
    const Tile& from)
    : ::google::protobuf::Message(arena) {
  Tile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, zoom_),
           offsetof(Impl_, y_) -
               offsetof(Impl_, zoom_) +
               sizeof(Impl_::y_));

  // @@protoc_insertion_point(copy_constructor:Tile)
}
inline PROTOBUF_NDEBUG_INLINE Tile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodes_{visibility, arena},
        local_coords_{visibility, arena},
        inter_edges_{visibility, arena},
        _inter_edges_cached_byte_size_{0},
        intra_edges_{visibility, arena},
        _intra_edges_cached_byte_size_{0},
        node_to_feature_{visibility, arena},
        _node_to_feature_cached_byte_size_{0},
        features_{visibility, arena},
        _cached_size_{0} {}

inline void Tile::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, zoom_) +
               sizeof(Impl_::y_));
}
Tile::~Tile() {
  // @@protoc_insertion_point(destructor:Tile)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Tile::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tile)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.local_coords_.Clear();
  _impl_.inter_edges_.Clear();
  _impl_.intra_edges_.Clear();
  _impl_.node_to_feature_.Clear();
  _impl_.features_.Clear();
  ::memset(&_impl_.zoom_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.zoom_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Tile::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 0, 2> Tile::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Tile_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float nodes = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.nodes_)}},
    // repeated float local_coords = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.local_coords_)}},
    // repeated int32 inter_edges = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.inter_edges_)}},
    // repeated int32 intra_edges = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.intra_edges_)}},
    // repeated int32 node_to_feature = 5;
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.node_to_feature_)}},
    // repeated .Feature features = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.features_)}},
    // int32 zoom = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Tile, _impl_.zoom_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.zoom_)}},
    // int32 x = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Tile, _impl_.x_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.x_)}},
    // int32 y = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Tile, _impl_.y_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.y_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float nodes = 1;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.nodes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float local_coords = 2;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.local_coords_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated int32 inter_edges = 3;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.inter_edges_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 intra_edges = 4;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.intra_edges_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 node_to_feature = 5;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.node_to_feature_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated .Feature features = 6;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.features_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 zoom = 7;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.zoom_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x = 8;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 9;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Feature>()},
  }}, {{
  }},
};

::uint8_t* Tile::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float nodes = 1;
  if (this->_internal_nodes_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_nodes(), target);
  }

  // repeated float local_coords = 2;
  if (this->_internal_local_coords_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_local_coords(), target);
  }

  // repeated int32 inter_edges = 3;
  {
    int byte_size = _impl_._inter_edges_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_inter_edges(), byte_size, target);
    }
  }

  // repeated int32 intra_edges = 4;
  {
    int byte_size = _impl_._intra_edges_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_intra_edges(), byte_size, target);
    }
  }

  // repeated int32 node_to_feature = 5;
  {
    int byte_size = _impl_._node_to_feature_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_node_to_feature(), byte_size, target);
    }
  }

  // repeated .Feature features = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_features().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 zoom = 7;
  if (this->_internal_zoom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_zoom(), target);
  }

  // int32 x = 8;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 9;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tile)
  return target;
}

::size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float nodes = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_nodes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float local_coords = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_local_coords_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 inter_edges = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_inter_edges())
    ;
    _impl_._inter_edges_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 intra_edges = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_intra_edges())
    ;
    _impl_._intra_edges_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 node_to_feature = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_node_to_feature())
    ;
    _impl_._node_to_feature_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .Feature features = 6;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->_internal_features()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 zoom = 7;
  if (this->_internal_zoom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_zoom());
  }

  // int32 x = 8;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 9;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Tile::_class_data_ = {
    Tile::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Tile::GetClassData() const {
  return &_class_data_;
}

void Tile::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Tile*>(&to_msg);
  auto& from = static_cast<const Tile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nodes()->MergeFrom(from._internal_nodes());
  _this->_internal_mutable_local_coords()->MergeFrom(from._internal_local_coords());
  _this->_internal_mutable_inter_edges()->MergeFrom(from._internal_inter_edges());
  _this->_internal_mutable_intra_edges()->MergeFrom(from._internal_intra_edges());
  _this->_internal_mutable_node_to_feature()->MergeFrom(from._internal_node_to_feature());
  _this->_internal_mutable_features()->MergeFrom(
      from._internal_features());
  if (from._internal_zoom() != 0) {
    _this->_internal_set_zoom(from._internal_zoom());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Tile::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Tile::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Tile::InternalSwap(Tile* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.local_coords_.InternalSwap(&other->_impl_.local_coords_);
  _impl_.inter_edges_.InternalSwap(&other->_impl_.inter_edges_);
  _impl_.intra_edges_.InternalSwap(&other->_impl_.intra_edges_);
  _impl_.node_to_feature_.InternalSwap(&other->_impl_.node_to_feature_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, _impl_.y_)
      + sizeof(Tile::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Tile, _impl_.zoom_)>(
          reinterpret_cast<char*>(&_impl_.zoom_),
          reinterpret_cast<char*>(&other->_impl_.zoom_));
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_processed_5ftile_5fgroup_2eproto_getter, &descriptor_table_processed_5ftile_5fgroup_2eproto_once,
      file_level_metadata_processed_5ftile_5fgroup_2eproto[1]);
}
// ===================================================================

class TileGroup::_Internal {
 public:
};

TileGroup::TileGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TileGroup)
}
inline PROTOBUF_NDEBUG_INLINE TileGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : tiles_{visibility, arena, from.tiles_},
        _cached_size_{0} {}

TileGroup::TileGroup(
    ::google::protobuf::Arena* arena,
    const TileGroup& from)
    : ::google::protobuf::Message(arena) {
  TileGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, zoom_),
           offsetof(Impl_, y_) -
               offsetof(Impl_, zoom_) +
               sizeof(Impl_::y_));

  // @@protoc_insertion_point(copy_constructor:TileGroup)
}
inline PROTOBUF_NDEBUG_INLINE TileGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tiles_{visibility, arena},
        _cached_size_{0} {}

inline void TileGroup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, zoom_) +
               sizeof(Impl_::y_));
}
TileGroup::~TileGroup() {
  // @@protoc_insertion_point(destructor:TileGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TileGroup::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TileGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:TileGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tiles_.Clear();
  ::memset(&_impl_.zoom_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.zoom_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TileGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> TileGroup::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TileGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Tile tiles = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.tiles_)}},
    // int32 zoom = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TileGroup, _impl_.zoom_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.zoom_)}},
    // int32 x = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TileGroup, _impl_.x_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.x_)}},
    // int32 y = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TileGroup, _impl_.y_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 zoom = 1;
    {PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.zoom_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x = 2;
    {PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 3;
    {PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Tile tiles = 4;
    {PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.tiles_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Tile>()},
  }}, {{
  }},
};

::uint8_t* TileGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TileGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 zoom = 1;
  if (this->_internal_zoom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_zoom(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_y(), target);
  }

  // repeated .Tile tiles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TileGroup)
  return target;
}

::size_t TileGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TileGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tile tiles = 4;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->_internal_tiles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 zoom = 1;
  if (this->_internal_zoom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_zoom());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TileGroup::_class_data_ = {
    TileGroup::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TileGroup::GetClassData() const {
  return &_class_data_;
}

void TileGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TileGroup*>(&to_msg);
  auto& from = static_cast<const TileGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TileGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tiles()->MergeFrom(
      from._internal_tiles());
  if (from._internal_zoom() != 0) {
    _this->_internal_set_zoom(from._internal_zoom());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TileGroup::CopyFrom(const TileGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TileGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TileGroup::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TileGroup::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TileGroup::InternalSwap(TileGroup* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tiles_.InternalSwap(&other->_impl_.tiles_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.y_)
      + sizeof(TileGroup::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TileGroup, _impl_.zoom_)>(
          reinterpret_cast<char*>(&_impl_.zoom_),
          reinterpret_cast<char*>(&other->_impl_.zoom_));
}

::google::protobuf::Metadata TileGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_processed_5ftile_5fgroup_2eproto_getter, &descriptor_table_processed_5ftile_5fgroup_2eproto_once,
      file_level_metadata_processed_5ftile_5fgroup_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
