// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processed_tile_group.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_processed_5ftile_5fgroup_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_processed_5ftile_5fgroup_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_processed_5ftile_5fgroup_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_processed_5ftile_5fgroup_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_processed_5ftile_5fgroup_2eproto;
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Tile;
struct TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
class TileGroup;
struct TileGroupDefaultTypeInternal;
extern TileGroupDefaultTypeInternal _TileGroup_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Feature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Feature(::google::protobuf::internal::ConstantInitialized);

  inline Feature(const Feature& from)
      : Feature(nullptr, from) {}
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Feature& from) {
    Feature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Feature* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Feature";
  }
  protected:
  explicit Feature(::google::protobuf::Arena* arena);
  Feature(::google::protobuf::Arena* arena, const Feature& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
    kMinBoxFieldNumber = 2,
    kAreaFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kRotationFieldNumber = 6,
    kIsPointFieldNumber = 7,
    kIsPolylineFieldNumber = 8,
    kIsPolygonFieldNumber = 9,
    kIsRelationFieldNumber = 10,
  };
  // repeated string tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, std::size_t size);
  void set_tags(int index, absl::string_view value);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, std::size_t size);
  void add_tags(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // repeated float min_box = 2;
  int min_box_size() const;
  private:
  int _internal_min_box_size() const;

  public:
  void clear_min_box() ;
  float min_box(int index) const;
  void set_min_box(int index, float value);
  void add_min_box(float value);
  const ::google::protobuf::RepeatedField<float>& min_box() const;
  ::google::protobuf::RepeatedField<float>* mutable_min_box();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_min_box() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_min_box();

  public:
  // float area = 3;
  void clear_area() ;
  float area() const;
  void set_area(float value);

  private:
  float _internal_area() const;
  void _internal_set_area(float value);

  public:
  // float width = 4;
  void clear_width() ;
  float width() const;
  void set_width(float value);

  private:
  float _internal_width() const;
  void _internal_set_width(float value);

  public:
  // float height = 5;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // float rotation = 6;
  void clear_rotation() ;
  float rotation() const;
  void set_rotation(float value);

  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);

  public:
  // bool is_point = 7;
  void clear_is_point() ;
  bool is_point() const;
  void set_is_point(bool value);

  private:
  bool _internal_is_point() const;
  void _internal_set_is_point(bool value);

  public:
  // bool is_polyline = 8;
  void clear_is_polyline() ;
  bool is_polyline() const;
  void set_is_polyline(bool value);

  private:
  bool _internal_is_polyline() const;
  void _internal_set_is_polyline(bool value);

  public:
  // bool is_polygon = 9;
  void clear_is_polygon() ;
  bool is_polygon() const;
  void set_is_polygon(bool value);

  private:
  bool _internal_is_polygon() const;
  void _internal_set_is_polygon(bool value);

  public:
  // bool is_relation = 10;
  void clear_is_relation() ;
  bool is_relation() const;
  void set_is_relation(bool value);

  private:
  bool _internal_is_relation() const;
  void _internal_set_is_relation(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Feature)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::RepeatedField<float> min_box_;
    float area_;
    float width_;
    float height_;
    float rotation_;
    bool is_point_;
    bool is_polyline_;
    bool is_polygon_;
    bool is_relation_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_processed_5ftile_5fgroup_2eproto;
};// -------------------------------------------------------------------

class Tile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tile) */ {
 public:
  inline Tile() : Tile(nullptr) {}
  ~Tile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Tile(::google::protobuf::internal::ConstantInitialized);

  inline Tile(const Tile& from)
      : Tile(nullptr, from) {}
  Tile(Tile&& from) noexcept
    : Tile() {
    *this = ::std::move(from);
  }

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile& operator=(Tile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tile& a, Tile& b) {
    a.Swap(&b);
  }
  inline void Swap(Tile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Tile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Tile& from) {
    Tile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Tile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Tile";
  }
  protected:
  explicit Tile(::google::protobuf::Arena* arena);
  Tile(::google::protobuf::Arena* arena, const Tile& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kLocalCoordsFieldNumber = 2,
    kInterEdgesFieldNumber = 3,
    kIntraEdgesFieldNumber = 4,
    kNodeToFeatureFieldNumber = 5,
    kFeaturesFieldNumber = 6,
    kZoomFieldNumber = 7,
    kXFieldNumber = 8,
    kYFieldNumber = 9,
  };
  // repeated float nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  float nodes(int index) const;
  void set_nodes(int index, float value);
  void add_nodes(float value);
  const ::google::protobuf::RepeatedField<float>& nodes() const;
  ::google::protobuf::RepeatedField<float>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_nodes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_nodes();

  public:
  // repeated float local_coords = 2;
  int local_coords_size() const;
  private:
  int _internal_local_coords_size() const;

  public:
  void clear_local_coords() ;
  float local_coords(int index) const;
  void set_local_coords(int index, float value);
  void add_local_coords(float value);
  const ::google::protobuf::RepeatedField<float>& local_coords() const;
  ::google::protobuf::RepeatedField<float>* mutable_local_coords();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_local_coords() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_local_coords();

  public:
  // repeated int32 inter_edges = 3;
  int inter_edges_size() const;
  private:
  int _internal_inter_edges_size() const;

  public:
  void clear_inter_edges() ;
  ::int32_t inter_edges(int index) const;
  void set_inter_edges(int index, ::int32_t value);
  void add_inter_edges(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& inter_edges() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_inter_edges();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_inter_edges() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_inter_edges();

  public:
  // repeated int32 intra_edges = 4;
  int intra_edges_size() const;
  private:
  int _internal_intra_edges_size() const;

  public:
  void clear_intra_edges() ;
  ::int32_t intra_edges(int index) const;
  void set_intra_edges(int index, ::int32_t value);
  void add_intra_edges(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& intra_edges() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_intra_edges();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_intra_edges() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_intra_edges();

  public:
  // repeated int32 node_to_feature = 5;
  int node_to_feature_size() const;
  private:
  int _internal_node_to_feature_size() const;

  public:
  void clear_node_to_feature() ;
  ::int32_t node_to_feature(int index) const;
  void set_node_to_feature(int index, ::int32_t value);
  void add_node_to_feature(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& node_to_feature() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_node_to_feature();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_node_to_feature() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_node_to_feature();

  public:
  // repeated .Feature features = 6;
  int features_size() const;
  private:
  int _internal_features_size() const;

  public:
  void clear_features() ;
  ::Feature* mutable_features(int index);
  ::google::protobuf::RepeatedPtrField< ::Feature >*
      mutable_features();
  private:
  const ::google::protobuf::RepeatedPtrField<::Feature>& _internal_features() const;
  ::google::protobuf::RepeatedPtrField<::Feature>* _internal_mutable_features();
  public:
  const ::Feature& features(int index) const;
  ::Feature* add_features();
  const ::google::protobuf::RepeatedPtrField< ::Feature >&
      features() const;
  // int32 zoom = 7;
  void clear_zoom() ;
  ::int32_t zoom() const;
  void set_zoom(::int32_t value);

  private:
  ::int32_t _internal_zoom() const;
  void _internal_set_zoom(::int32_t value);

  public:
  // int32 x = 8;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 9;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Tile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> nodes_;
    ::google::protobuf::RepeatedField<float> local_coords_;
    ::google::protobuf::RepeatedField<::int32_t> inter_edges_;
    mutable ::google::protobuf::internal::CachedSize _inter_edges_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> intra_edges_;
    mutable ::google::protobuf::internal::CachedSize _intra_edges_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> node_to_feature_;
    mutable ::google::protobuf::internal::CachedSize _node_to_feature_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::Feature > features_;
    ::int32_t zoom_;
    ::int32_t x_;
    ::int32_t y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_processed_5ftile_5fgroup_2eproto;
};// -------------------------------------------------------------------

class TileGroup final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TileGroup) */ {
 public:
  inline TileGroup() : TileGroup(nullptr) {}
  ~TileGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TileGroup(::google::protobuf::internal::ConstantInitialized);

  inline TileGroup(const TileGroup& from)
      : TileGroup(nullptr, from) {}
  TileGroup(TileGroup&& from) noexcept
    : TileGroup() {
    *this = ::std::move(from);
  }

  inline TileGroup& operator=(const TileGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileGroup& operator=(TileGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileGroup* internal_default_instance() {
    return reinterpret_cast<const TileGroup*>(
               &_TileGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TileGroup& a, TileGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TileGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TileGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TileGroup& from) {
    TileGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TileGroup* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TileGroup";
  }
  protected:
  explicit TileGroup(::google::protobuf::Arena* arena);
  TileGroup(::google::protobuf::Arena* arena, const TileGroup& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 4,
    kZoomFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // repeated .Tile tiles = 4;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;

  public:
  void clear_tiles() ;
  ::Tile* mutable_tiles(int index);
  ::google::protobuf::RepeatedPtrField< ::Tile >*
      mutable_tiles();
  private:
  const ::google::protobuf::RepeatedPtrField<::Tile>& _internal_tiles() const;
  ::google::protobuf::RepeatedPtrField<::Tile>* _internal_mutable_tiles();
  public:
  const ::Tile& tiles(int index) const;
  ::Tile* add_tiles();
  const ::google::protobuf::RepeatedPtrField< ::Tile >&
      tiles() const;
  // int32 zoom = 1;
  void clear_zoom() ;
  ::int32_t zoom() const;
  void set_zoom(::int32_t value);

  private:
  ::int32_t _internal_zoom() const;
  void _internal_set_zoom(::int32_t value);

  public:
  // int32 x = 2;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 3;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TileGroup)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::Tile > tiles_;
    ::int32_t zoom_;
    ::int32_t x_;
    ::int32_t y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_processed_5ftile_5fgroup_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Feature

// repeated string tags = 1;
inline int Feature::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int Feature::tags_size() const {
  return _internal_tags_size();
}
inline void Feature::clear_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tags_.Clear();
}
inline std::string* Feature::add_tags()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:Feature.tags)
  return _s;
}
inline const std::string& Feature::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Feature.tags)
  return _internal_tags().Get(index);
}
inline std::string* Feature::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Feature.tags)
  return _internal_mutable_tags()->Mutable(index);
}
inline void Feature::set_tags(int index, const std::string& value) {
  _internal_mutable_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Feature.tags)
}
inline void Feature::set_tags(int index, std::string&& value) {
  _internal_mutable_tags()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Feature.tags)
}
inline void Feature::set_tags(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Feature.tags)
}
inline void Feature::set_tags(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_tags()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Feature.tags)
}
inline void Feature::set_tags(int index, absl::string_view value) {
  _internal_mutable_tags()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Feature.tags)
}
inline void Feature::add_tags(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Feature.tags)
}
inline void Feature::add_tags(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Feature.tags)
}
inline void Feature::add_tags(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Feature.tags)
}
inline void Feature::add_tags(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Feature.tags)
}
inline void Feature::add_tags(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Feature.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Feature::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Feature.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Feature::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Feature.tags)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Feature::_internal_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Feature::_internal_mutable_tags() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tags_;
}

// repeated float min_box = 2;
inline int Feature::_internal_min_box_size() const {
  return _internal_min_box().size();
}
inline int Feature::min_box_size() const {
  return _internal_min_box_size();
}
inline void Feature::clear_min_box() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_box_.Clear();
}
inline float Feature::min_box(int index) const {
  // @@protoc_insertion_point(field_get:Feature.min_box)
  return _internal_min_box().Get(index);
}
inline void Feature::set_min_box(int index, float value) {
  _internal_mutable_min_box()->Set(index, value);
  // @@protoc_insertion_point(field_set:Feature.min_box)
}
inline void Feature::add_min_box(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_min_box()->Add(value);
  // @@protoc_insertion_point(field_add:Feature.min_box)
}
inline const ::google::protobuf::RepeatedField<float>& Feature::min_box() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Feature.min_box)
  return _internal_min_box();
}
inline ::google::protobuf::RepeatedField<float>* Feature::mutable_min_box()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Feature.min_box)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_min_box();
}
inline const ::google::protobuf::RepeatedField<float>& Feature::_internal_min_box()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_box_;
}
inline ::google::protobuf::RepeatedField<float>* Feature::_internal_mutable_min_box() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.min_box_;
}

// float area = 3;
inline void Feature::clear_area() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.area_ = 0;
}
inline float Feature::area() const {
  // @@protoc_insertion_point(field_get:Feature.area)
  return _internal_area();
}
inline void Feature::set_area(float value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:Feature.area)
}
inline float Feature::_internal_area() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.area_;
}
inline void Feature::_internal_set_area(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.area_ = value;
}

// float width = 4;
inline void Feature::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
}
inline float Feature::width() const {
  // @@protoc_insertion_point(field_get:Feature.width)
  return _internal_width();
}
inline void Feature::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Feature.width)
}
inline float Feature::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Feature::_internal_set_width(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// float height = 5;
inline void Feature::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
}
inline float Feature::height() const {
  // @@protoc_insertion_point(field_get:Feature.height)
  return _internal_height();
}
inline void Feature::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Feature.height)
}
inline float Feature::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Feature::_internal_set_height(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// float rotation = 6;
inline void Feature::clear_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotation_ = 0;
}
inline float Feature::rotation() const {
  // @@protoc_insertion_point(field_get:Feature.rotation)
  return _internal_rotation();
}
inline void Feature::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:Feature.rotation)
}
inline float Feature::_internal_rotation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotation_;
}
inline void Feature::_internal_set_rotation(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rotation_ = value;
}

// bool is_point = 7;
inline void Feature::clear_is_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_point_ = false;
}
inline bool Feature::is_point() const {
  // @@protoc_insertion_point(field_get:Feature.is_point)
  return _internal_is_point();
}
inline void Feature::set_is_point(bool value) {
  _internal_set_is_point(value);
  // @@protoc_insertion_point(field_set:Feature.is_point)
}
inline bool Feature::_internal_is_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_point_;
}
inline void Feature::_internal_set_is_point(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_point_ = value;
}

// bool is_polyline = 8;
inline void Feature::clear_is_polyline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_polyline_ = false;
}
inline bool Feature::is_polyline() const {
  // @@protoc_insertion_point(field_get:Feature.is_polyline)
  return _internal_is_polyline();
}
inline void Feature::set_is_polyline(bool value) {
  _internal_set_is_polyline(value);
  // @@protoc_insertion_point(field_set:Feature.is_polyline)
}
inline bool Feature::_internal_is_polyline() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_polyline_;
}
inline void Feature::_internal_set_is_polyline(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_polyline_ = value;
}

// bool is_polygon = 9;
inline void Feature::clear_is_polygon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_polygon_ = false;
}
inline bool Feature::is_polygon() const {
  // @@protoc_insertion_point(field_get:Feature.is_polygon)
  return _internal_is_polygon();
}
inline void Feature::set_is_polygon(bool value) {
  _internal_set_is_polygon(value);
  // @@protoc_insertion_point(field_set:Feature.is_polygon)
}
inline bool Feature::_internal_is_polygon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_polygon_;
}
inline void Feature::_internal_set_is_polygon(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_polygon_ = value;
}

// bool is_relation = 10;
inline void Feature::clear_is_relation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_relation_ = false;
}
inline bool Feature::is_relation() const {
  // @@protoc_insertion_point(field_get:Feature.is_relation)
  return _internal_is_relation();
}
inline void Feature::set_is_relation(bool value) {
  _internal_set_is_relation(value);
  // @@protoc_insertion_point(field_set:Feature.is_relation)
}
inline bool Feature::_internal_is_relation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_relation_;
}
inline void Feature::_internal_set_is_relation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_relation_ = value;
}

// -------------------------------------------------------------------

// Tile

// repeated float nodes = 1;
inline int Tile::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int Tile::nodes_size() const {
  return _internal_nodes_size();
}
inline void Tile::clear_nodes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodes_.Clear();
}
inline float Tile::nodes(int index) const {
  // @@protoc_insertion_point(field_get:Tile.nodes)
  return _internal_nodes().Get(index);
}
inline void Tile::set_nodes(int index, float value) {
  _internal_mutable_nodes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Tile.nodes)
}
inline void Tile::add_nodes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_nodes()->Add(value);
  // @@protoc_insertion_point(field_add:Tile.nodes)
}
inline const ::google::protobuf::RepeatedField<float>& Tile::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Tile.nodes)
  return _internal_nodes();
}
inline ::google::protobuf::RepeatedField<float>* Tile::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Tile.nodes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_nodes();
}
inline const ::google::protobuf::RepeatedField<float>& Tile::_internal_nodes()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedField<float>* Tile::_internal_mutable_nodes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.nodes_;
}

// repeated float local_coords = 2;
inline int Tile::_internal_local_coords_size() const {
  return _internal_local_coords().size();
}
inline int Tile::local_coords_size() const {
  return _internal_local_coords_size();
}
inline void Tile::clear_local_coords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_coords_.Clear();
}
inline float Tile::local_coords(int index) const {
  // @@protoc_insertion_point(field_get:Tile.local_coords)
  return _internal_local_coords().Get(index);
}
inline void Tile::set_local_coords(int index, float value) {
  _internal_mutable_local_coords()->Set(index, value);
  // @@protoc_insertion_point(field_set:Tile.local_coords)
}
inline void Tile::add_local_coords(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_local_coords()->Add(value);
  // @@protoc_insertion_point(field_add:Tile.local_coords)
}
inline const ::google::protobuf::RepeatedField<float>& Tile::local_coords() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Tile.local_coords)
  return _internal_local_coords();
}
inline ::google::protobuf::RepeatedField<float>* Tile::mutable_local_coords()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Tile.local_coords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_local_coords();
}
inline const ::google::protobuf::RepeatedField<float>& Tile::_internal_local_coords()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_coords_;
}
inline ::google::protobuf::RepeatedField<float>* Tile::_internal_mutable_local_coords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.local_coords_;
}

// repeated int32 inter_edges = 3;
inline int Tile::_internal_inter_edges_size() const {
  return _internal_inter_edges().size();
}
inline int Tile::inter_edges_size() const {
  return _internal_inter_edges_size();
}
inline void Tile::clear_inter_edges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inter_edges_.Clear();
}
inline ::int32_t Tile::inter_edges(int index) const {
  // @@protoc_insertion_point(field_get:Tile.inter_edges)
  return _internal_inter_edges().Get(index);
}
inline void Tile::set_inter_edges(int index, ::int32_t value) {
  _internal_mutable_inter_edges()->Set(index, value);
  // @@protoc_insertion_point(field_set:Tile.inter_edges)
}
inline void Tile::add_inter_edges(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inter_edges()->Add(value);
  // @@protoc_insertion_point(field_add:Tile.inter_edges)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Tile::inter_edges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Tile.inter_edges)
  return _internal_inter_edges();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Tile::mutable_inter_edges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Tile.inter_edges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inter_edges();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Tile::_internal_inter_edges()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inter_edges_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Tile::_internal_mutable_inter_edges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inter_edges_;
}

// repeated int32 intra_edges = 4;
inline int Tile::_internal_intra_edges_size() const {
  return _internal_intra_edges().size();
}
inline int Tile::intra_edges_size() const {
  return _internal_intra_edges_size();
}
inline void Tile::clear_intra_edges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intra_edges_.Clear();
}
inline ::int32_t Tile::intra_edges(int index) const {
  // @@protoc_insertion_point(field_get:Tile.intra_edges)
  return _internal_intra_edges().Get(index);
}
inline void Tile::set_intra_edges(int index, ::int32_t value) {
  _internal_mutable_intra_edges()->Set(index, value);
  // @@protoc_insertion_point(field_set:Tile.intra_edges)
}
inline void Tile::add_intra_edges(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_intra_edges()->Add(value);
  // @@protoc_insertion_point(field_add:Tile.intra_edges)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Tile::intra_edges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Tile.intra_edges)
  return _internal_intra_edges();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Tile::mutable_intra_edges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Tile.intra_edges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_intra_edges();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Tile::_internal_intra_edges()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intra_edges_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Tile::_internal_mutable_intra_edges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.intra_edges_;
}

// repeated int32 node_to_feature = 5;
inline int Tile::_internal_node_to_feature_size() const {
  return _internal_node_to_feature().size();
}
inline int Tile::node_to_feature_size() const {
  return _internal_node_to_feature_size();
}
inline void Tile::clear_node_to_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_to_feature_.Clear();
}
inline ::int32_t Tile::node_to_feature(int index) const {
  // @@protoc_insertion_point(field_get:Tile.node_to_feature)
  return _internal_node_to_feature().Get(index);
}
inline void Tile::set_node_to_feature(int index, ::int32_t value) {
  _internal_mutable_node_to_feature()->Set(index, value);
  // @@protoc_insertion_point(field_set:Tile.node_to_feature)
}
inline void Tile::add_node_to_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_node_to_feature()->Add(value);
  // @@protoc_insertion_point(field_add:Tile.node_to_feature)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Tile::node_to_feature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Tile.node_to_feature)
  return _internal_node_to_feature();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Tile::mutable_node_to_feature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Tile.node_to_feature)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_node_to_feature();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Tile::_internal_node_to_feature()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_to_feature_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Tile::_internal_mutable_node_to_feature() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.node_to_feature_;
}

// repeated .Feature features = 6;
inline int Tile::_internal_features_size() const {
  return _internal_features().size();
}
inline int Tile::features_size() const {
  return _internal_features_size();
}
inline void Tile::clear_features() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.features_.Clear();
}
inline ::Feature* Tile::mutable_features(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Tile.features)
  return _internal_mutable_features()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Feature>* Tile::mutable_features()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Tile.features)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_features();
}
inline const ::Feature& Tile::features(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Tile.features)
  return _internal_features().Get(index);
}
inline ::Feature* Tile::add_features() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Feature* _add = _internal_mutable_features()->Add();
  // @@protoc_insertion_point(field_add:Tile.features)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Feature>& Tile::features() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Tile.features)
  return _internal_features();
}
inline const ::google::protobuf::RepeatedPtrField<::Feature>&
Tile::_internal_features() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.features_;
}
inline ::google::protobuf::RepeatedPtrField<::Feature>*
Tile::_internal_mutable_features() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.features_;
}

// int32 zoom = 7;
inline void Tile::clear_zoom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zoom_ = 0;
}
inline ::int32_t Tile::zoom() const {
  // @@protoc_insertion_point(field_get:Tile.zoom)
  return _internal_zoom();
}
inline void Tile::set_zoom(::int32_t value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:Tile.zoom)
}
inline ::int32_t Tile::_internal_zoom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zoom_;
}
inline void Tile::_internal_set_zoom(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.zoom_ = value;
}

// int32 x = 8;
inline void Tile::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline ::int32_t Tile::x() const {
  // @@protoc_insertion_point(field_get:Tile.x)
  return _internal_x();
}
inline void Tile::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Tile.x)
}
inline ::int32_t Tile::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Tile::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 y = 9;
inline void Tile::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline ::int32_t Tile::y() const {
  // @@protoc_insertion_point(field_get:Tile.y)
  return _internal_y();
}
inline void Tile::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Tile.y)
}
inline ::int32_t Tile::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Tile::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// TileGroup

// int32 zoom = 1;
inline void TileGroup::clear_zoom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zoom_ = 0;
}
inline ::int32_t TileGroup::zoom() const {
  // @@protoc_insertion_point(field_get:TileGroup.zoom)
  return _internal_zoom();
}
inline void TileGroup::set_zoom(::int32_t value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:TileGroup.zoom)
}
inline ::int32_t TileGroup::_internal_zoom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zoom_;
}
inline void TileGroup::_internal_set_zoom(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.zoom_ = value;
}

// int32 x = 2;
inline void TileGroup::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline ::int32_t TileGroup::x() const {
  // @@protoc_insertion_point(field_get:TileGroup.x)
  return _internal_x();
}
inline void TileGroup::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TileGroup.x)
}
inline ::int32_t TileGroup::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void TileGroup::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 y = 3;
inline void TileGroup::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline ::int32_t TileGroup::y() const {
  // @@protoc_insertion_point(field_get:TileGroup.y)
  return _internal_y();
}
inline void TileGroup::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TileGroup.y)
}
inline ::int32_t TileGroup::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void TileGroup::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// repeated .Tile tiles = 4;
inline int TileGroup::_internal_tiles_size() const {
  return _internal_tiles().size();
}
inline int TileGroup::tiles_size() const {
  return _internal_tiles_size();
}
inline void TileGroup::clear_tiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tiles_.Clear();
}
inline ::Tile* TileGroup::mutable_tiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TileGroup.tiles)
  return _internal_mutable_tiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Tile>* TileGroup::mutable_tiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TileGroup.tiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tiles();
}
inline const ::Tile& TileGroup::tiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TileGroup.tiles)
  return _internal_tiles().Get(index);
}
inline ::Tile* TileGroup::add_tiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Tile* _add = _internal_mutable_tiles()->Add();
  // @@protoc_insertion_point(field_add:TileGroup.tiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Tile>& TileGroup::tiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TileGroup.tiles)
  return _internal_tiles();
}
inline const ::google::protobuf::RepeatedPtrField<::Tile>&
TileGroup::_internal_tiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tiles_;
}
inline ::google::protobuf::RepeatedPtrField<::Tile>*
TileGroup::_internal_mutable_tiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tiles_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_processed_5ftile_5fgroup_2eproto_2epb_2eh
